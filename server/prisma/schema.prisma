generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite" // Or your actual provider
  url      = env("DATABASE_URL")
}

model Survey {
  id        String     @id @default(cuid())
  objective String
  questions Question[]
  nodes     Node[]
  edges     Edge[]
  createdAt DateTime   @default(now())
  deployedAt DateTime?
  analysisResultText String?
}

model Question {
  id         String     @id @default(cuid())
  surveyId   String
  text       String
  createdAt  DateTime   @default(now())
  sentimentScore Float?
  sentimentSummary String?
  survey     Survey     @relation(fields: [surveyId], references: [id])
  responses  Response[]
}

model Response {
  id         String   @id @default(cuid())
  questionId String
  nodeId     String?
  answer     String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  node       Node?    @relation(fields: [nodeId], references: [id])
}

/// New models for branching surveys
model Node {
  id        String   @id @default(cuid())
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id])
  type      String
  content   Json
  outgoingEdges Edge[] @relation("SourceNode")
  incomingEdges Edge[] @relation("TargetNode")
  responses Response[]
}

model Edge {
  id           String @id @default(cuid())
  surveyId     String
  survey       Survey @relation(fields: [surveyId], references: [id])
  sourceNodeId String
  targetNodeId String
  sourceNode   Node   @relation("SourceNode", fields: [sourceNodeId], references: [id])
  targetNode   Node   @relation("TargetNode", fields: [targetNodeId], references: [id])
  conditionValue String?
}
